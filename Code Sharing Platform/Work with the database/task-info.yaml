type: edu
files:
- name: src/platform/CodeSharingPlatform.java
  visible: true
  text: |
    package platform;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;
    import org.springframework.web.bind.annotation.RestController;

    @SpringBootApplication
    @RestController
    public class CodeSharingPlatform {

        public static void main(String[] args) {
            SpringApplication.run(CodeSharingPlatform.class, args);
        }

    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |
    plugins {
        id 'org.springframework.boot' version '2.3.3.RELEASE'
        id 'java'
    }

    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = 11

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        compile("org.springframework.boot:spring-boot-starter-web")
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |
    server.port=8889
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CodeSharingPlatformTest.java
  visible: false
  text: |
    import com.google.gson.JsonArray;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.jsoup.Jsoup;
    import org.jsoup.nodes.Document;
    import org.jsoup.nodes.Element;
    import org.jsoup.select.Elements;
    import platform.CodeSharingPlatform;

    import java.util.HashMap;
    import java.util.Map;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isArray;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isString;

    public class CodeSharingPlatformTest extends SpringTest {
        public CodeSharingPlatformTest() {
            super(CodeSharingPlatform.class, "../snippets.mv.db");
        }

        final String API_CODE = "/api/code/";
        final String WEB_CODE = "/code/";

        final String API_CODE_NEW = "/api/code/new";
        final String WEB_CODE_NEW = "/code/new";

        final String API_LATEST = "/api/code/latest";
        final String WEB_LATEST = "/code/latest";

        final String[] SNIPPETS = {
            "public static void ...",
            "class Code { ...",
            "Snippet #3",
            "Snippet #4",
            "Snippet #5",
            "Snippet #6",
            "Snippet #7",
            "Snippet #8",
            "Snippet #9",
            "Snippet #10",
            "Snippet #11",
            "Snippet #12",
            "Snippet #13",
            "Snippet #14",
        };

        final Map<Integer, String> ids = new HashMap<>();
        final Map<Integer, String> dates = new HashMap<>();

        static String th(int val) {
            if (val == 1) {
                return "" + val + "st";
            } else if (val == 2) {
                return "" + val + "nd";
            } else if (val == 3) {
                return "" + val + "rd";
            } else {
                return "" + val + "th";
            }
        }

        static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        static void checkTitle(Document doc, String url, String title) {
            if (!doc.title().equals(title)) {
                throw new WrongAnswer("GET " + url +
                    " should contain title \"" + title + "\"");
            }
        }

        static Element getSingleTag(Element doc, String url, String tag) {
            Elements elems = getElemsByTag(doc, url, tag, 1);
            return elems.get(0);
        }

        static Elements getElemsByTag(Element doc, String url, String tag, int length) {
            Elements elems = doc.getElementsByTag(tag);
            if (elems.size() != length) {
                throw new WrongAnswer("GET " + url +
                    " should contain " + length + " <" + tag + "> " +
                    "element"+ (length == 1 ? "" : "s") +", found: " + elems.size());
            }
            return elems;
        }

        static Element getById(Element doc, String url, String id, String tag) {
            Element elem = doc.getElementById(id);

            if (elem == null) {
                throw new WrongAnswer("GET " + url +
                    " should contain an element with id \"" + id + "\", no one found");
            }

            if (!elem.tagName().equals(tag)) {
                throw new WrongAnswer("GET " + url +
                    " should contain an element with id  \"" + id + "\" and tag \"" + tag + "\", " +
                    "found another tag: \"" + elem.tagName() + "\"");
            }

            return elem;
        }

        @DynamicTestingMethod
        public DynamicTesting[] dt = new DynamicTesting[] {
            // test 1
            this::checkWebCodeNew,

            // test 2
            () -> postSnippet(0),
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiLatest(0),
            () -> checkWebLatest(0),

            // test 7
            () -> postSnippet(1),
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiCode(1),
            () -> checkWebCode(1),
            () -> checkApiLatest(1, 0),
            () -> checkWebLatest(1, 0),

            // test 14
            () -> postSnippet(2),
            () -> postSnippet(3),
            () -> postSnippet(4),
            () -> postSnippet(5),
            () -> postSnippet(6),
            () -> postSnippet(7),
            () -> postSnippet(8),
            () -> postSnippet(9),
            () -> postSnippet(10),
            () -> postSnippet(11),
            () -> postSnippet(12),
            () -> postSnippet(13),

            // test 26
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiCode(1),
            () -> checkWebCode(1),
            () -> checkApiCode(2),
            () -> checkWebCode(2),
            () -> checkApiCode(3),
            () -> checkWebCode(3),
            () -> checkApiCode(4),
            () -> checkWebCode(4),
            () -> checkApiCode(5),
            () -> checkWebCode(5),
            () -> checkApiCode(6),
            () -> checkWebCode(6),
            () -> checkApiCode(7),
            () -> checkWebCode(7),
            () -> checkApiCode(8),
            () -> checkWebCode(8),
            () -> checkApiCode(9),
            () -> checkWebCode(9),
            () -> checkApiCode(10),
            () -> checkWebCode(10),
            () -> checkApiCode(11),
            () -> checkWebCode(11),
            () -> checkApiCode(12),
            () -> checkWebCode(12),
            () -> checkApiCode(13),
            () -> checkWebCode(13),

            // test 54
            () -> checkApiLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),
            () -> checkWebLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),

            // test 56
            this::reloadServer,

            // test 57
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiCode(1),
            () -> checkWebCode(1),
            () -> checkApiCode(2),
            () -> checkWebCode(2),
            () -> checkApiCode(3),
            () -> checkWebCode(3),
            () -> checkApiCode(4),
            () -> checkWebCode(4),
            () -> checkApiCode(5),
            () -> checkWebCode(5),
            () -> checkApiCode(6),
            () -> checkWebCode(6),
            () -> checkApiCode(7),
            () -> checkWebCode(7),
            () -> checkApiCode(8),
            () -> checkWebCode(8),
            () -> checkApiCode(9),
            () -> checkWebCode(9),
            () -> checkApiCode(10),
            () -> checkWebCode(10),
            () -> checkApiCode(11),
            () -> checkWebCode(11),
            () -> checkApiCode(12),
            () -> checkWebCode(12),
            () -> checkApiCode(13),
            () -> checkWebCode(13),

            // test 85
            () -> checkApiLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),
            () -> checkWebLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),
        };

        private CheckResult checkApiCode(int id) {
            String codeId = ids.get(id);
            String snippet = SNIPPETS[id];

            HttpResponse resp = get(API_CODE + codeId).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("code", snippet)
                    .value("date", isString(s -> {
                        if (dates.containsKey(id)) {
                            return s.equals(dates.get(id));
                        }
                        dates.put(id, s);
                        return true;
                    }))
            );

            return CheckResult.correct();
        }

        private CheckResult checkWebCode(int id) {
            String codeId = ids.get(id);
            String apiSnippet = SNIPPETS[id];
            String apiDate = dates.get(id);

            String req = WEB_CODE + codeId;
            HttpResponse resp = get(req).send();
            checkStatusCode(resp, 200);

            String html = resp.getContent();
            Document doc = Jsoup.parse(html);

            checkTitle(doc, req, "Code");

            Element pre = getById(doc, req, "code_snippet", "pre");
            Element code = getSingleTag(pre, req, "code");

            String webSnippetCode = code.text();
            if (!webSnippetCode.trim().equals(apiSnippet.trim())) {
                return CheckResult.wrong("Web code snippet " +
                    "and api code snippet are different");
            }

            Element date = getById(doc, req, "load_date", "span");
            String webSnippetDate = date.text();
            if (!webSnippetDate.trim().equals(apiDate.trim())) {
                return CheckResult.wrong("Web snippet date " +
                    "and api snippet date are different");
            }

            if (!html.contains("hljs.initHighlightingOnLoad()")) {
                return CheckResult.wrong(
                    "Can't determine if code highlighting works or not.\n" +
                    "Use \"hljs.initHighlightingOnLoad()\" inside the script tags in the HTML page.");
            }

            return CheckResult.correct();
        }

        private CheckResult checkWebCodeNew() {
            HttpResponse resp = get(WEB_CODE_NEW).send();
            checkStatusCode(resp, 200);

            String html = resp.getContent();
            Document doc = Jsoup.parse(html);

            checkTitle(doc, WEB_CODE_NEW, "Create");

            getById(doc, WEB_CODE_NEW, "code_snippet", "textarea");
            getById(doc, WEB_CODE_NEW, "send_snippet", "button");

            return CheckResult.correct();
        }

        private CheckResult postSnippet(int id) {
            String snippet = SNIPPETS[id];

            HttpResponse resp = post(API_CODE_NEW, "{\"code\":\"" + snippet + "\"}").send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("id", isString(i -> {
                        try {
                            Integer.parseInt(i);
                        } catch (NumberFormatException ex) {
                            return false;
                        }
                        ids.put(id, "" + i);
                        return true;
                    }))
            );

            return CheckResult.correct();
        }

        private CheckResult checkApiLatest(int... ids) {
            String req = API_LATEST;
            HttpResponse resp = get(req).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isArray(ids.length, isObject()
                    .value("code", isString())
                    .value("date", isString())
                )
            );

            JsonArray elem = resp.getJson().getAsJsonArray();
            for (int i = 0; i < ids.length; i++) {
                JsonObject item = elem.get(i).getAsJsonObject();

                String actualSnippet = SNIPPETS[ids[i]];
                String actualDate = dates.get(ids[i]);

                String givenSnippet = item.get("code").getAsString();
                String givenDate = item.get("date").getAsString();

                if (!actualSnippet.equals(givenSnippet)) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1) +
                        " snippet doesn't match actual snippet.\n" +
                        "Expected:\n" + actualSnippet + "\n" +
                        "Found:\n" + givenSnippet);
                }

                if (!actualDate.equals(givenDate)) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1) +
                        " snippet's date doesn't match actual snippet's date.\n" +
                        "Expected:\n" + actualDate + "\n" +
                        "Found:\n" + givenDate);
                }
            }

            return CheckResult.correct();
        }

        private CheckResult checkWebLatest(int... ids) {
            String req = WEB_LATEST;
            HttpResponse resp = get(req).send();
            checkStatusCode(resp, 200);

            String html = resp.getContent();
            Document doc = Jsoup.parse(html);

            checkTitle(doc, req, "Latest");

            Elements preList = getElemsByTag(doc, req, "pre", ids.length);
            Elements spanList = getElemsByTag(doc, req, "span", ids.length);

            for (int i = 0; i < ids.length; i++) {
                String apiSnippet = SNIPPETS[ids[i]];
                String apiDate = dates.get(ids[i]);
                Element pre = preList.get(i);

                String webSnippetCode = pre.text();
                if (!webSnippetCode.trim().equals(apiSnippet.trim())) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1)
                        + " snippet doesn't match " + th(i + 1) + " snippet via api.\n" +
                        "Expected:\n" + apiSnippet + "\n" +
                        "Found:\n" + webSnippetCode);
                }

                Element date = spanList.get(i);
                String webSnippetDate = date.text();
                if (!webSnippetDate.trim().equals(apiDate.trim())) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1)
                        + " snippet's date doesn't match " + th(i + 1)
                        + " snippet's date via api.\n" +
                        "Expected:\n" + apiDate + "\n" +
                        "Found:\n" + webSnippetDate);
                }
            }

            return CheckResult.correct();
        }

        private CheckResult reloadServer() {
            try {
                reloadSpring();
            } catch (Exception ex) {
                throw new RuntimeException(ex.getMessage());
            }
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/resources/templates/welcome.ftlh
  visible: true
  text: |-
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Hello World !${name}</title>
        <style>
           h2 {
            font-size: 120%;
            font-family: Verdana, Arial, Helvetica, sans-serif;
            color: #333366;
           }
          </style>
    </head>
    <body>
    <h2>Hello World!${name}</h2>
    </body>
    </html>
  learner_created: true
- name: src/resources/templates/codeTemplate.ftlh
  visible: true
  text: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>Code</title>
        <!--<link rel="stylesheet" href="/css/style.css">-->
           <style type="text/css">
              span {
               font-family: Verdana, Arial, Helvetica, sans-serif;
               color: #333366;
              }
              pre {
               border: 2px solid black;
               background-color:lightgray;
               margin: 5px;
               }
             </style>
    </head>
    <body>

    <span id="load_date">${date}</span>
    <pre id="code_snippet">${codeBody}</pre>


    </body>
    </html>
  learner_created: true
- name: src/resources/static/styles.css
  visible: true
  text: |-
    pre {
          border: 2px solid black;
          background-color:lightgray;
          margin: 5px;
     }


     #load_date {
          color: green;
          margin: 5px;
     }

     #item {
        margin: 5px;
        padding: 10px;
     }

     #code_snippet {
        background-color:lightgray;
     }
  learner_created: true
- name: src/resources/templates/latest.ftlh
  visible: true
  text: |-
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Latest</title>
        <!--<link rel="stylesheet" href="/css/style.css">-->
        <style type="text/css">
           span {
            font-family: Verdana, Arial, Helvetica, sans-serif;
            color: #333366;
           }
           pre {
            border: 2px solid black;
            background-color:lightgray;
            margin: 5px;
            }
          </style>
    </head>

    <body>
        <#list snippets as snippet>
                <pre id="code_snippet">${snippet.getCode()}</pre>
                <span id="load_date">${snippet.getDate()}</span>
        </#list>
    </body>
    </html>
  learner_created: true
- name: src/platform/CodeSharingAPI.java
  visible: true
  text: |-
    package platform;

    import java.io.StringWriter;
    import java.util.ArrayList;
    import java.util.Collections;
    import java.util.List;
    import java.util.concurrent.atomic.AtomicLong;
    import com.google.gson.Gson;
    import com.google.gson.GsonBuilder;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.MediaType;
    import org.springframework.http.ResponseEntity;
    import org.springframework.stereotype.Controller;
    import org.springframework.ui.Model;
    import org.springframework.web.bind.annotation.*;
    import org.springframework.web.servlet.ModelAndView;

    import javax.json.Json;
    import javax.json.JsonObject;
    import javax.json.JsonWriter;
    import javax.servlet.http.HttpServletResponse;
    import java.time.LocalDateTime;
    import java.time.LocalTime;
    import java.time.format.DateTimeFormatter;


    @RestController
    public class CodeSharingAPI {
        //public static int x = 0;
        //public static List<CodeInformation> codes = new ArrayList<>();


        @PostMapping(value = "api/code/new", consumes = "application/json")
        public String greet(@RequestBody Code code) {
            String codetext = code.getContent();
            CodeInformation codeinfo = new CodeInformation(codetext);
            //codes.add(codeinfo);
            Repository rep = Repository.getInstance();
            rep.addCode(codeinfo);
            JsonObject value = Json.createObjectBuilder()
                    .add("id", String.valueOf(codeinfo.getId()))
                    .build();

            String out = value.toString();
            return out;
        }


        @GetMapping("/api/code/{id}")
        public CodeInformation getCodeById(@PathVariable int id){

            CodeInformation retval = null;
            Repository rep = Repository.getInstance();
            //for(CodeInformation code : codes){
            for(CodeInformation code : rep.getCodes()){
                if (code.getId() == id) {
                    retval = code;
                    break;
                }
            }
            return retval;
        }


        @GetMapping("/api/code/latest")
        public List<CodeInformation> getLatest(){
            /*
            Repository rep = Repository.getInstance();
            List<CodeInformation> codes = rep.getReversed();
            List<CodeInformation> tail = codes.subList(Math.max(codes.size() - 3, 0), codes.size());
            */
            Repository rep = Repository.getInstance();
            return rep.getTenLatestReversed();
            //return tail;
        }

    }
  learner_created: true
- name: src/platform/ReactionController.java
  visible: true
  text: |
    package platform;

    import java.util.*;
    import java.util.concurrent.atomic.AtomicLong;
    import com.google.gson.Gson;
    import com.google.gson.GsonBuilder;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.MediaType;
    import org.springframework.http.ResponseEntity;
    import org.springframework.stereotype.Controller;
    import org.springframework.ui.Model;
    import org.springframework.web.bind.annotation.*;
    import org.springframework.web.servlet.ModelAndView;

    import javax.servlet.http.HttpServletResponse;
    import java.time.LocalDateTime;
    import java.time.LocalTime;
    import java.time.format.DateTimeFormatter;




    @Controller
    public class ReactionController {

        private static final String template = "Hello, %s!";
        private final AtomicLong counter = new AtomicLong();
        private static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();
        //private static String codeoutput = "public static void main(String[] args) {\n    SpringApplication.run(CodeSharingPlatform.class, args);\n}";


        @GetMapping(value = "code/new", produces = MediaType.TEXT_HTML_VALUE)
        @ResponseBody
        public String codeform() {
            //return "<html>\n" + "<header><title>Welcome</title></header>\n" +
            //        "<body>\n" + "Hello world\n" + "</body>\n" + "</html>";
            return "<html>\n" +
                    "<head><title>Create</title>" +
                    "<script type=\"text/javascript\">function send() {\n" +
                    "    let object = {\n" +
                    "        \"code\": document.getElementById(\"code_snippet\").value\n" +
                    "    };\n" +
                    "    \n" +
                    "    let json = JSON.stringify(object);\n" +
                    "    \n" +
                    "    let xhr = new XMLHttpRequest();\n" +
                    "    xhr.open(\"POST\", '/api/code/new', false)\n" +
                    "    xhr.setRequestHeader('Content-type', 'application/json; charset=utf-8');\n" +
                    "    xhr.send(json);\n" +
                    "    \n" +
                    "    if (xhr.status == 200) {\n" +
                    "      alert(\"Success!\");\n" +
                    "    }\n" +
                    "}</script>\n" +
                    "</head>\n" +
                    "<body>\n"+ "<textarea id=\"code_snippet\">//Write your code here</textarea>\n" +
                    "<button id=\"send_snippet\" type=\"submit\" onclick=\"send()\">Submit</button>\n" +
                    "</body>\n" + "</html>";
        }


        @GetMapping(value = "/code/{id}")
        //public ModelAndView getCodeHtml(@PathVariable("id") Long id, HttpServletResponse response) {
        public String getCodeHtml(Model model, @PathVariable("id") Long id) {
            //response.addHeader("Content-Type", "text/html");
            CodeInformation retval = null;
            Repository rep = Repository.getInstance();
            for(CodeInformation code : rep.getCodes()){
                if (code.getId() == id) {
                    retval = code;
                    break;
                }
            }
            model.addAttribute("codeBody", retval.getCode());
            model.addAttribute("date", retval.getDate());

            return "codeTemplate";
        }

        @GetMapping(value = "/code/latest")
        public String getLatest(Model model) {
            /*
            List<CodeInformation> temp = null;
            Repository rep = Repository.getInstance();
            temp.addAll(rep.getCodes());
            Collections.reverse(temp);
            List<CodeInformation> tail = temp.subList(Math.max(temp.size() - 3, 0), temp.size());
            */

            Repository rep = Repository.getInstance();
            //List<CodeInformation> codes = rep.getReversed();
            //List<CodeInformation> tail = codes.subList(Math.max(codes.size() - 3, 0), codes.size());
            model.addAttribute("snippets", rep.getTenLatestReversed());

            return "latest";
        }

        @RequestMapping("/welcome")
        public String hello(Model model, @RequestParam(value = "name", required = false, defaultValue = "World") String name) {
            model.addAttribute("name", name);
            System.out.println();

            return "welcome";
        }


    }
  learner_created: true
- name: src/platform/Date.java
  visible: true
  text: |
    package platform;

    import java.time.LocalDateTime;
    import java.time.LocalTime;
    import java.time.format.DateTimeFormatter;

    public class Date {

        public String getDate() {
            LocalDateTime nowdate = LocalDateTime.now();
            LocalTime nowtime = LocalTime.now();
            String formattedDate = nowdate.format(DateTimeFormatter.ofPattern("yyyy/MM/dd")) + " " + nowtime.withNano(0);
            return formattedDate;
        }
    }
  learner_created: true
- name: src/platform/CodeInformation.java
  visible: true
  text: |-
    package platform;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;

    import java.time.LocalDateTime;
    import java.time.LocalTime;
    import java.time.format.DateTimeFormatter;

    public class CodeInformation {

        private static int numofobjects = 0;  // static int noOfObjects = 0;
        private String code;
        private String date;
        private int id;

        public CodeInformation(String code) {
            this.code = code;
            this.date = SetDate();
            numofobjects++;
            this.id = numofobjects;
        }

        @JsonProperty("code")
        public String getCode() {
            return code;
        }

        @JsonProperty("date")
        public String getDate() {
            return date;
        }

        @JsonIgnore
        public int getId() {
            return id;
        }

        private String SetDate() {
            LocalDateTime nowdate = LocalDateTime.now();
            LocalTime nowtime = LocalTime.now();
            String formattedDate = nowdate.format(DateTimeFormatter.ofPattern("yyyy/MM/dd")) + " " + nowtime.withNano(0);
            return formattedDate;
        }
    }
  learner_created: true
- name: src/platform/Code.java
  visible: true
  text: |-
    package platform;

    import com.fasterxml.jackson.annotation.JsonProperty;

    public class Code {
        private String code;

        public Code() {
            code = "class Code { ...";
        }

        public void setCode(String code) {
            this.code = code;
        }

        @JsonProperty("code")
        public String getContent() {
            return code;
        }
    }
  learner_created: true
- name: src/platform/EmptyJsonResponse.java
  visible: true
  text: |
    package platform;

    import com.fasterxml.jackson.databind.annotation.JsonSerialize;

    @JsonSerialize
    public class EmptyJsonResponse { }
  learner_created: true
- name: src/platform/Repository.java
  visible: true
  text: |-
    package platform;

    import java.util.ArrayList;
    import java.util.Collections;
    import java.util.List;

    class Repository {

        private static Repository instance;
        private List<CodeInformation> codeinfo = new ArrayList<>();
        private boolean isReversed = false;
        private Repository () { }

        public static Repository getInstance() {
            if (instance == null) {
                instance = new Repository();
            }
            return instance;
        }

        public List<CodeInformation> getReversed () {
            Collections.reverse(codeinfo);
            return codeinfo;
        }

        public List<CodeInformation> getTenLatestReversed () {
            List<CodeInformation> output = new ArrayList<>();
            output.addAll(codeinfo);
            if (output.size() > 10) {
                output = output.subList(output.size() - 10, output.size());
            }
            Collections.reverse(output);
            return output;
        }

        public void addCode(CodeInformation code) {
            codeinfo.add(code);
        }

        public List<CodeInformation> getCodes() {
            return codeinfo;
        }
    }
  learner_created: true
- name: src/platform/CodeService.java
  visible: true
  learner_created: true
- name: src/platform/CodeRepository.java
  visible: true
  learner_created: true
- name: src/platform/CodeNotFoundException.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/130/stages/695/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sun, 07 Mar 2021 12:59:06 UTC
record: 4
